from flask import Flask, request, jsonify
from werkzeug.serving import run_simple
import threading

app = Flask(__name__)

# In-memory storage for users
users = {
    1: {"name": "Rambabu", "email": "rambb@gmail.com"},
    2: {"name": "varun", "email": "varun123@gmail.com"}
}

# GET all users
@app.route("/users", methods=["GET"])
def get_users():
    return jsonify(users)

# GET a single user by ID
@app.route("/users/<int:user_id>", methods=["GET"])
def get_user(user_id):
    user = users.get(user_id)
    if user:
        return jsonify(user)
    return jsonify({"error": "User not found"}), 404

# POST - Add a new user
@app.route("/users", methods=["POST"])
def create_user():
    data = request.get_json()
    if not data or "name" not in data or "email" not in data:
        return jsonify({"error": "Invalid input"}), 400
    
    new_id = max(users.keys(), default=0) + 1
    users[new_id] = {"name": data["name"], "email": data["email"]}
    return jsonify({"id": new_id, "user": users[new_id]}), 201

# PUT - Update an existing user
@app.route("/users/<int:user_id>", methods=["PUT"])
def update_user(user_id):
    data = request.get_json()
    if user_id not in users:
        return jsonify({"error": "User not found"}), 404
    
    users[user_id].update(data)
    return jsonify({"id": user_id, "user": users[user_id]})

# DELETE - Remove a user
@app.route("/users/<int:user_id>", methods=["DELETE"])
def delete_user(user_id):
    if user_id in users:
        deleted_user = users.pop(user_id)
        return jsonify({"message": "User deleted", "user": deleted_user})
    return jsonify({"error": "User not found"}), 404


# Run Flask inside Jupyter
def run_app():
    run_simple("localhost", 5000, app, use_reloader=False, use_debugger=True)

thread = threading.Thread(target=run_app)
thread.start()
